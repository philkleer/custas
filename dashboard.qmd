---
title: 'Custos'
author: 'Philipp Kleer'
format: dashboard
theme: [sandstone, ./assets/dashboard.scss]
server: shiny
runtime: shiny
jupyter: python3
execute: 
  eval: true
  echo: false
---

```{python}
#| label: preparations
import plotly.express as px
import pandas as pd
from shiny import reactive, render
from shiny.express import input, render, ui
from shinywidgets import render_widget
from datetime import datetime, timedelta
from faicons import icon_svg
import matplotlib.colors as mcolors

df = pd.read_csv('data/Custos.csv')
# df['data'] = pd.to_datetime(df['data'])
# df['data'] = df['data'].dt.strftime('%Y-%m')

grouped_df = df.loc[(df['tipo'] != 'renda')].groupby(
    ['data', 'tipo']).agg({'valor': 'sum'}).reset_index()

df_avg = grouped_df.groupby('tipo').agg({'valor': 'mean'}).reset_index()

# for the month-wise plots
def lighten_color(color, factor):
    """Lightens a given color by blending it with white."""
    rgb = mcolors.to_rgb(color)  # Convert HEX to RGB
    white = (1, 1, 1)  # White color in RGB
    return mcolors.to_hex([(1 - factor) * c + factor * w for c, w in zip(rgb, white)])
```

# Geral

## Row {height=40%}

### {.sidebar}

```{python}
#| label: input-select-overview
newest_month = df['data'].max()
oldest_month = df['data'].min()

newest_month_str = pd.to_datetime(newest_month).strftime('%Y-%m-%d')
oldest_month_str = pd.to_datetime(oldest_month).strftime('%Y-%m-%d')

ui.input_date_range(
    'daterange', 'Intervalo:',
    start=oldest_month_str,
    end=newest_month_str,
    min=oldest_month_str,
    max=newest_month_str,
    format='yyyy-mm',
    startview = 'year',
    language='pt-BR'
)

@reactive.calc
def filtered_data():
    data_selected = df.loc[(df['data'] >= input.daterange()[0].strftime('%Y-%m')) & (df['data'] <= input.daterange()[1].strftime('%Y-%m'))]
    return data_selected

```

### Column

```{python}
#| content: valuebox
#| title: 'Diferência entre rendas e Custos (média)'
#| icon: plus-slash-minus
#| color: '#579d9050'

@render.text  
def sum_over_month():  
    data_selected = df.loc[(df['data'] >= input.daterange()[0].strftime('%Y-%m')) & (df['data'] <= input.daterange()[1].strftime('%Y-%m')) & (df['tipo'] != 'renda')]
    mean_value = data_selected.groupby('data')['valor'].sum()

    data_selected = df.loc[(df['data'] >= input.daterange()[0].strftime('%Y-%m')) & (df['data'] <= input.daterange()[1].strftime('%Y-%m')) & (df['tipo'] == 'renda')]
    mean_value2 = data_selected.groupby('data')['valor'].sum()    

    return f'R$ {mean_value2.mean() - mean_value.mean():.2f}'  
```

### Column

```{python}
#| content: valuebox
#| title: 'Custos de apartamento (média)'
#| icon: house-check
#| color: '#579d9050'

@render.text  
def medio_1():  
    data_selected = df.loc[(df['data'] >= input.daterange()[0].strftime('%Y-%m')) & (df['data'] <= input.daterange()[1].strftime('%Y-%m')) & (df['tipo'] == 'apartamento')]
    mean_value = data_selected.groupby('data')['valor'].sum()

    return f'R$ {mean_value.mean():.2f}'  
```

### Column
```{python}
#| content: valuebox
#| title: 'Custos de supermercados (média)'
#| icon: basket2
#| color: '#579d9050'

@render.text  
def medio_2():  
    data_selected = df.loc[(df['data'] >= input.daterange()[0].strftime('%Y-%m')) & (df['data'] <= input.daterange()[1].strftime('%Y-%m')) & (df['tipo'] == 'supermercado')]
    mean_value = data_selected.groupby('data')['valor'].sum()

    return f'R$ {mean_value.mean():.2f}' 

```

### Column
```{python}
#| content: valuebox
#| title: 'Custos de lazer (média)'
#| icon: balloon
#| color: '#579d9050'

@render.text  
def medio_3():  
    data_selected = df.loc[(df['data'] >= input.daterange()[0].strftime('%Y-%m')) & (df['data'] <= input.daterange()[1].strftime('%Y-%m')) & (df['tipo'] == 'lazer')]
    mean_value = data_selected.groupby('data')['valor'].sum()

    return f'R$ {mean_value.mean():.2f}' 

```

## Row {height=60%}

### Column {width=45%}
```{python}
#| label: lineplot
@render_widget
def plot_line():  
    plotdata = filtered_data()
    
    plotdata_cleaned = plotdata.loc[(plotdata['tipo'] != 'renda')].groupby(
    ['data', 'tipo']).agg({'valor': 'sum'}).reset_index()


    line_plot = px.line(
        data_frame=plotdata_cleaned.loc[(df['tipo'] != 'renda')], 
        x='data', 
        y='valor', 
        color='tipo',
        labels=dict(data='Mês', valor='Valor (R$)', tipo='Tipo'),
        color_discrete_map={
            'apartamento':'#D81B60',
            'lazer':'#1E88E5',
            'outros':'#FFC107',
            'supermercado':'#009E73'
        }
    ).update_layout(
        xaxis_type='date',
    )

    line_plot.update_xaxes(
        tickangle=60,
        title_standoff=25
    )    

    line_plot.update_yaxes(
        tick0=0, dtick=250
    )

    return line_plot
```

### Column {width=45%}
```{python}
#| label: pieplot
@render_widget
def plot():  
    plotdata = filtered_data()

    pie_total = px.pie(
        plotdata.loc[(df['tipo'] != 'renda')],
        values='valor',  
        names='tipo', 
        hole=0.5,
        color='tipo', 
        color_discrete_map={
            'apartamento':'#D81B60',
            'lazer':'#1E88E5',
            'outros':'#FFC107',
            'supermercado':'#009E73'
        }
        )
    return pie_total
```


# Por mês

## Row 
### {.sidebar}

```{python}
#| label: input-select
def generate_month_range(start_month: str, end_month: str):
    # Convert the start and end months to datetime objects
    start_date = datetime.strptime(start_month, '%Y-%m')
    end_date = datetime.strptime(end_month, '%Y-%m')

    # Initialize the array and a temporary variable to track the current month
    month_array = []
    current_date = start_date

    # Loop through each month from start to end, appending to the list
    while current_date <= end_date:
        month_array.append(current_date.strftime('%Y-%m'))  # Append as string
        # Move to the next month
        current_date = (current_date.replace(day=1) + timedelta(days=31)).replace(day=1)

    return month_array

@reactive.effect
def _():
    start_month = input.daterange()[0].strftime('%Y-%m')
    end_month = input.daterange()[1].strftime('%Y-%m')

    # Generate the month range
    months = generate_month_range(start_month, end_month)

    input.month_select.choices = months

    ui.insert_ui

    ui.update_select(
        'month',
        choices=input.month_select.choices,
        selected=input.month_select.choices[1]
    )

ui.input_select(
    'month', 'Escolha mês', []
)

```

A partir do período de tempo selecionado em `geral`, você pode selecionar um mês para fazer as visões gerais desse mês específico.

```{python}
#| label: calculate_gastos
@render.text
def value():
    gastos_mes = df.loc[(df['data'] == str(input.month())) & (df['tipo'] != 'renda')]['valor'].sum()
    renda_mes = df.loc[(df['data'] == str(input.month())) & (df['tipo'] == 'renda')]['valor'].sum()
    diff = renda_mes - gastos_mes
    string = 'Neste mês gastamos: R$' + str(round(gastos_mes, 2)) + '\n'+ 'Neste mês renda: R$' + str(round(renda_mes, 2)) + '\n\n' + 'Diferênça este mês: R$:' + str(round(diff, 2))

    return string

```

### Column
```{python}
#| label: pieplot_month
@render_widget
def plot_month():  
    pie_total = px.pie(
        data_frame=df.loc[(df['data'] == str(input.month())) & (df['tipo'] != 'renda')],
        values='valor',  
        names='tipo', 
        color='tipo', 
        color_discrete_map={
            'apartamento':'#D81B60',
            'lazer':'#1E88E5',
            'outros':'#FFC107',
            'supermercado':'#009E73'
        },
        hole=0.5)
    return pie_total
```

## Row {height=10%}

### Column
```{python}
@render.text
def valor_apartamento():
    data = df.loc[(df['data'] == str(input.month())) & (df['tipo'].isin(['apartamento']))]

    sum_value = round(data.valor.sum(), 2)
    
    return f'Gastos para apartamento: {sum_value}'
```

### Column

```{python}
@render.text
def valor_supermercado():
    data = df.loc[(df['data'] == str(input.month())) & (df['tipo'].isin(['supermercado']))]

    sum_value = round(data.valor.sum(), 2)
    
    return f'Gastos para supermercado: {sum_value}'
```

### Column
```{python}
@render.text
def valor_lazer():
    data = df.loc[(df['data'] == str(input.month())) & (df['tipo'].isin(['lazer']))]

    sum_value = round(data.valor.sum(), 2)
    
    return f'Gastos para lazer: {sum_value}'
```

### Column
```{python}
@render.text
def valor_outros():
    data = df.loc[(df['data'] == str(input.month())) & (df['tipo'].isin(['outros']))]

    sum_value = round(data.valor.sum(), 2)
    
    return f'Gastos para outros: {sum_value}'
```

## Row {height=40%}

### Column

```{python}
#| label: pieplot_apartamento
@render_widget
def plot_apartamento():  
    filtered_df = df.loc[(df['data'] == str(input.month())) & (df['tipo'].isin(['apartamento'])) & (df['valor'] > 0)].sort_values(by='valor', ascending=False)  
    
    unique_labels = filtered_df['label'].unique()

    base_color = '#D81B60'

    max_steps = len(unique_labels) - 1 if len(unique_labels) > 1 else 1

    alpha_step = 0.9 / max_steps
    
    # Generate lighter colors
    color_discrete_map = {
        label: lighten_color(base_color, factor=i * alpha_step)  
        for i, label in enumerate(unique_labels)
    }

    pie_apartamento = px.pie(
        data_frame=filtered_df, 
        values='valor',  
        names='label', 
        hole=0.5,
        color='label', 
        color_discrete_map = color_discrete_map
        )
    return pie_apartamento
```

### Column

```{python}
#| label: pieplot_supermercado
@render_widget
def plot_supermercado():  
    filtered_df = df.loc[(df['data'] == str(input.month())) & (df['tipo'] == 'supermercado') & (df['valor'] > 0)].sort_values(by='valor', ascending=False)  

    unique_labels = filtered_df['label'].unique()

    base_color = '#009E73'

    max_steps = len(unique_labels) - 1 if len(unique_labels) > 1 else 1

    alpha_step = 0.9 / max_steps
    
    # Generate lighter colors
    color_discrete_map = {
        label: lighten_color(base_color, factor=i * alpha_step)  
        for i, label in enumerate(unique_labels)
    }

    pie_supermercado = px.pie(
        data_frame=filtered_df, 
        values='valor',  
        names='label', 
        color='label', 
        color_discrete_map=color_discrete_map,
        hole=0.5)
    return pie_supermercado
```

### Column

```{python}
#| label: pieplot_lazer
@render_widget
def plot_lazer():  
    filtered_df = df.loc[(df['data'] == str(input.month())) & (df['tipo'] == 'lazer') & (df['valor'] > 0)].sort_values(by='valor', ascending=False) 


    unique_labels = filtered_df['label'].unique()

    base_color = '#1E88E5'

    max_steps = len(unique_labels) - 1 if len(unique_labels) > 1 else 1

    alpha_step = 0.9 / max_steps

    color_discrete_map = {
        label: lighten_color(base_color, factor=i * alpha_step)  
        for i, label in enumerate(unique_labels)
    }

    pie_lazer = px.pie(
        data_frame=filtered_df, 
        values='valor',  
        names='label', 
        color='label', 
        color_discrete_map=color_discrete_map,
        hole=0.5)
    return pie_lazer
```

### Column

```{python}
#| label: pieplot_outros
@render_widget
def plot_outros():  

    filtered_df = df.loc[(df['data'] == str(input.month())) & (df['tipo'] == 'outros') & (df['valor'] > 0)].sort_values(by='valor', ascending=False) 

    unique_labels = filtered_df['label'].unique()

    base_color = '#FFC107'

    max_steps = len(unique_labels) - 1 if len(unique_labels) > 1 else 1

    alpha_step = 0.9 / max_steps

    color_discrete_map = {
        label: lighten_color(base_color, factor=i * alpha_step)  
        for i, label in enumerate(unique_labels)
    }

    pie_outros = px.pie(
        data_frame=filtered_df, 
        values='valor',  
        names='label', 
        color='label', 
        color_discrete_map=color_discrete_map,
        hole=0.5)
    return pie_outros
```

# Data
```{python}
#| label: data-exhibition

ui.h2('Data of the selected months')

@render.data_frame  
def my_df():
    return render.DataGrid(filtered_data()) 

```