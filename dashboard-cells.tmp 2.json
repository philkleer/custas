{"cells":[{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"import plotly.express as px\nimport pandas as pd\nfrom shiny import reactive, render\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_widget \nfrom datetime import datetime, timedelta\n\ndf = pd.read_csv('data/custas.csv')\n# df['data'] = pd.to_datetime(df['data'])\n# df['data'] = df['data'].dt.strftime('%Y-%m')\n\ngrouped_df = df.loc[(df['tipo'] != 'renda')].groupby(\n    ['data', 'tipo']).agg({'valor': 'sum'}).reset_index()\n\ndf_avg = grouped_df.groupby('tipo').agg({'valor': 'mean'}).reset_index()"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"newest_month = pd.to_datetime(df['data'].max())\noldest_month = pd.to_datetime(df['data'].min())\n\nui.input_date_range(\"daterange\", \"Date range:\",\n               start=oldest_month,\n               end=newest_month,\n            #    max=newest_month.strftime(\"%Y-%m-%d\"),\n            #    min=oldest_month.strftime(\"%Y-%m-%d\")\n               format='mm/yyyy',\n               startview = \"year\",\n               language='pt-BR')"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"# @render_widget\n# start_month = input.daterange()[0].strftime('%Y-%m')\n# end_month = input.daterange()[0].strftime('%Y-%m')\n\ndict(\n  icon = \"archive\",\n  color = \"#579d90\",\n  value = \"17%\"\n)"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"dict(\n  icon = \"graph-down\",\n  color = \"#579d9050\",\n  value = \"14%\"\n)"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"dict(\n  icon = \"bullseye\",\n  color = \"#579d9050\",\n  value = \"10%\"\n)"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"@render_widget\ndef plot_line():  \n    start_month = input.daterange()[0].strftime('%Y-%m')\n    end_month = input.daterange()[1].strftime('%Y-%m')\n\n    line_plot = px.line(\n        data_frame=grouped_df.loc[(df['data'] >= start_month) & (df['data'] <= end_month) & (df['tipo'] != 'renda')], \n        x=\"data\", \n        y='valor', \n        color='tipo',\n        labels=dict(data=\"MÃªs\", valor=\"Valor (R$)\", tipo=\"Tipo\"),\n        color_discrete_map={'aluguel':'#D81B60',\n                                 'lazer':'#1E88E5',\n                                 'outros':'#FFC107',\n                                 'supermercado':'#004D40'}\n    ).update_layout(\n        xaxis_type='category',\n    )\n\n    line_plot.update_xaxes(\n        tickangle=60,\n        title_standoff=25\n    )    \n\n    line_plot.update_yaxes(\n        tick0=0, dtick=250\n    )\n\n    return line_plot\n"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"@render_widget\ndef plot():  \n    start_month = input.daterange()[0].strftime('%Y-%m')\n    end_month = input.daterange()[1].strftime('%Y-%m')\n\n    pie_total = px.pie(\n        grouped_df.loc[(df['data'] >= start_month) & (df['data'] <= end_month) & (df['tipo'] != 'renda')],\n        values='valor',  \n        names='tipo', \n        hole=0.5\n        )\n    return pie_total"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"def generate_month_range(start_month: str, end_month: str):\n    # Convert the start and end months to datetime objects\n    start_date = datetime.strptime(start_month, \"%Y-%m\")\n    end_date = datetime.strptime(end_month, \"%Y-%m\")\n\n    # Initialize the array and a temporary variable to track the current month\n    month_array = []\n    current_date = start_date\n\n    # Loop through each month from start to end, appending to the list\n    while current_date <= end_date:\n        month_array.append(current_date.strftime(\"%Y-%m\"))  # Append as string\n        # Move to the next month\n        current_date = (current_date.replace(day=1) + timedelta(days=31)).replace(day=1)\n\n    return month_array\n\nui.input_select(\n    \"month\", \"Select month\", []\n)\n\n@reactive.effect\ndef _():\n    start_month = input.daterange()[0].strftime('%Y-%m')\n    end_month = input.daterange()[1].strftime('%Y-%m')\n\n    # Generate the month range\n    months = generate_month_range(start_month, end_month)\n\n    input.month_select.choices = months\n\n    ui.insert_ui\n\n    ui.update_select(\n        \"month\",\n        choices=input.month_select.choices,\n        selected=input.month_select.choices[1]\n    )\n\n@render.text\ndef value():\n    return str(input.month_select.choices)\n\n# def _():\n#     ui.input_selectize(\n#             \"month\", \"Select month\",\n#             input.month_select\n#         )\n# ui.input_select(\n#     \"y\",\n#     \"Year:\",\n#     choices=list(year_list)\n# )\n\n# ui.input_select(\n#     \"x\",\n#     \"Month:\",\n#     choices=list(month_list)\n# )"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"@render_widget\ndef plot_month():  \n    selected_year = [int(input.y())]  \n    selected_month = [int(input.x())] \n\n    pie_total = px.pie(\n        data_frame=df.loc[(df['year'].isin(selected_year)) & (df['month'].isin(selected_month)) & (df['tipo'] != 'renda')],\n        values='valor',  \n        names='tipo', \n        hole=0.5)\n    return pie_total"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"@render_widget\ndef plot_aluguel():  \n    selected_year = [int(input.y())]  \n    selected_month = [int(input.x())] \n\n    pie_aluguel = px.pie(\n        data_frame=df.loc[(df['year'].isin(selected_year)) & (df['month'].isin(selected_month)) & (df['tipo'].isin(['aluguel']))], \n        values='valor',  \n        names='label', \n        hole=0.5,\n        )\n    pie_aluguel.update_layout(\n        legend=dict(orientation='v', xanchor=\"center\", x=0, y=-2) \n    )\n    return pie_aluguel"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"@render_widget\ndef plot_supermercado():  \n    selected_year = [int(input.y())]  \n    selected_month = [int(input.x())] \n\n    pie_supermercado = px.pie(\n        data_frame=df.loc[(df['year'].isin(selected_year)) & (df['month'].isin(selected_month)) & (df['tipo'] == 'supermercado')], \n        values='valor',  \n        names='label', \n        hole=0.5)\n    return pie_supermercado"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"@render_widget\ndef plot_lazer():  \n    selected_year = [int(input.y())]  \n    selected_month = [int(input.x())] \n\n    pie_outros = px.pie(\n        data_frame=df.loc[(df['year'].isin(selected_year)) & (df['month'].isin(selected_month)) & (df['tipo'] == 'lazer')], \n        values='valor',  \n        names='label', \n        hole=0.5)\n    return pie_outros"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"@render_widget\ndef plot_outros():  \n    selected_year = [int(input.y())]  \n    selected_month = [int(input.x())] \n    \n    pie_outros = px.pie(\n        data_frame=df.loc[(df['year'].isin(selected_year)) & (df['month'].isin(selected_month)) & (df['tipo'] == 'outros')], \n        values='valor',  \n        names='label', \n        hole=0.5)\n    return pie_outros"},{"classes":["python","cell-code","hidden"],"context":["ui","server"],"text":"ui.h2(\"Data from the selected months\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataGrid(df) "}],"html_file":"dashboard.html","schema_version":1}